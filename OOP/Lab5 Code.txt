Triad.h

#ifndef TRIAD_H
#define TRIAD_H

#include <iostream>

class Triad {
protected:
    int first, second, third;

public:
    Triad();
    Triad(int f, int s, int t);
    virtual ~Triad() = 0; // Чисто виртуальный деструктор

    virtual void Show() const = 0; // Чисто виртуальный метод
    virtual void incrementFirst() = 0;
    virtual void incrementSecond() = 0;
    virtual void incrementThird() = 0;
};

#endif

Triad.cpp

#include "Triad.h"

Triad::Triad() : first(0), second(0), third(0) {}
Triad::Triad(int f, int s, int t) : first(f), second(s), third(t) {}
Triad::~Triad() {}

Date.h

#ifndef DATE_H
#define DATE_H

#include "Triad.h"

class Date : public Triad {
public:
    Date();
    Date(int year, int month, int day);
    ~Date();

    void Show() const override;
    void incrementFirst() override;
    void incrementSecond() override;
    void incrementThird() override;
    void addDays(int n);
};

#endif


Date.cpp

#include "Date.h"
#include <iostream>

using namespace std;

Date::Date() : Triad(2000, 1, 1) {}
Date::Date(int year, int month, int day) : Triad(year, month, day) {}
Date::~Date() {}

void Date::Show() const {
    cout << first << "-" << (second < 10 ? "0" : "") << second << "-" << (third < 10 ? "0" : "") << third << endl;
}

void Date::incrementFirst() { first++; }
void Date::incrementSecond() {
    second++;
    if (second > 12) {
        second = 1;
        incrementFirst();
    }
}
void Date::incrementThird() {
    third++;
    int daysInMonth = 31;
    if (second == 4 || second == 6 || second == 9 || second == 11) daysInMonth = 30;
    else if (second == 2) daysInMonth = (first % 4 == 0 && first % 100 != 0) || (first % 400 == 0) ? 29 : 28;
    if (third > daysInMonth) {
        third = 1;
        incrementSecond();
    }
}

void Date::addDays(int n) {
    for (int i = 0; i < n; i++) incrementThird();
}


Vector.h

#ifndef VECTOR_H
#define VECTOR_H

#include "Triad.h"
#include <vector>

class Vector {
private:
    std::vector<Triad*> elements;

public:
    Vector();
    Vector(int size);
    ~Vector();

    void add(Triad* t);
    friend std::ostream& operator<<(std::ostream& os, const Vector& v);
};

#endif

Vector.cpp

#include "Vector.h"
#include <iostream>

using namespace std;

Vector::Vector() {}
Vector::Vector(int size) : elements(size, nullptr) {}
Vector::~Vector() {
    for (auto elem : elements) delete elem;
}

void Vector::add(Triad* t) {
    elements.push_back(t);
}

ostream& operator<<(ostream& os, const Vector& v) {
    for (const auto* elem : v.elements) {
        elem->Show();
    }
    return os;
}


main.cpp

#include "Vector.h"
#include "Date.h"
#include <iostream>

using namespace std;

int main() {
    setlocale(LC_ALL, "Russian");

    Vector v;
    v.add(new Date(2023, 12, 31));
    v.add(new Date(2024, 1, 1));

    cout << "Вектор:\n" << v << endl;

    return 0;
}