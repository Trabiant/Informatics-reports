#include <iostream>
#include <fstream>
#include <stdio.h>
using namespace std;

struct SNode {
    int data;
    SNode* next;
};

void pushStack(SNode*& top, int value) {
    SNode* newNode = new SNode;
    newNode->data = value;
    newNode->next = top;
    top = newNode;
}

int popStack(SNode*& top) {
    if (top == NULL) {
        cout << "Стек пуст" << endl;
        return -1;
    }
    int value = top->data;
    SNode* temp = top;
    top = top->next;
    delete temp;
    return value;
}

void printStack(SNode* top) {
    if (top == NULL) {
        cout << "Стек пуст" << endl;
        return;
    }
    SNode* temp = top;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

void writeStack(SNode* top, const char* filename) {
    ofstream file(filename);
    if (!file) {
        cout << "Ошибка открытия файла для записи" << endl;
        return;
    }
    SNode* temp = top;
    while (temp != NULL) {
        file << temp->data << " ";
        temp = temp->next;
    }
    file.close();
}

void destroyStack(SNode*& top) {
    while (top != NULL) {
        SNode* temp = top;
        top = top->next;
        delete temp;
    }
}

void restoreStack(SNode*& top, const char* filename) {
    ifstream file(filename);
    if (!file) {
        cout << "Ошибка открытия файла для чтения" << endl;
        return;
    }
    destroyStack(top);
    int count = 0, tempValue;
    while (file >> tempValue)
        count++;
    int* arr = new int[count];
    file.clear();
    file.seekg(0, ios::beg);
    int i = 0;
    while (file >> tempValue)
        arr[i++] = tempValue;
    file.close();
    for (int j = count - 1; j >= 0; j--)
        pushStack(top, arr[j]);
    delete[] arr;
}

int main() {
    setlocale(LC_ALL, "ru");
    system("chcp 1251");
    system("cls");
    SNode* stack = NULL;
    pushStack(stack, 5);
    pushStack(stack, 15);
    pushStack(stack, 25);
    printStack(stack);
    cout << "Извлечено из стека: " << popStack(stack) << endl;
    printStack(stack);
    writeStack(stack, "stack.txt");
    destroyStack(stack);
    printStack(stack);
    restoreStack(stack, "stack.txt");
    printStack(stack);
    destroyStack(stack);
    return 0;
}

