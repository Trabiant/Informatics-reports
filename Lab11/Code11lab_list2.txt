#include <iostream>
#include <fstream>
#include <stdio.h>
using namespace std;

struct DNode {
    int data;
    DNode* next;
    DNode* prev;
};

void addDoubly(DNode*& head, int value, int position) {
    DNode* newNode = new DNode;
    newNode->data = value;
    newNode->next = NULL;
    newNode->prev = NULL;
    if (head == NULL) {
        if (position == 1)
            head = newNode;
        else {
            cout << "Неверная позиция, список пустой, вставка только на позицию 1" << endl;
            delete newNode;
        }
        return;
    }
    if (position == 1) {
        newNode->next = head;
        head->prev = newNode;
        head = newNode;
        return;
    }
    DNode* temp = head;
    int currentPos = 1;
    while (temp->next != NULL && currentPos < position - 1) {
        temp = temp->next;
        currentPos++;
    }
    newNode->next = temp->next;
    newNode->prev = temp;
    if (temp->next != NULL)
        temp->next->prev = newNode;
    temp->next = newNode;
}

void deleteFromEnd(DNode*& head, int K) {
    if (head == NULL) {
        cout << "Список пустой" << endl;
        return;
    }
    DNode* temp = head;
    int count = 0;
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }
    if (K > count) {
        cout << "Нельзя удалить больше элементов, чем имеется в списке" << endl;
        return;
    }
    for (int i = 0; i < K; i++) {
        temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        if (temp->prev != NULL)
            temp->prev->next = NULL;
        else
            head = NULL;
        delete temp;
    }
}

void printDoubly(DNode* head) {
    if (head == NULL) {
        cout << "Список пустой" << endl;
        return;
    }
    DNode* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

void writeDoubly(DNode* head, const char* filename) {
    ofstream file(filename);
    if (!file) {
        cout << "Ошибка открытия файла для записи" << endl;
        return;
    }
    DNode* temp = head;
    while (temp != NULL) {
        file << temp->data << " ";
        temp = temp->next;
    }
    file.close();
}

void destroyDoubly(DNode*& head) {
    DNode* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        delete temp;
    }
}

void restoreDoubly(DNode*& head, const char* filename) {
    ifstream file(filename);
    if (!file) {
        cout << "Ошибка открытия файла для чтения" << endl;
        return;
    }
    destroyDoubly(head);
    int value;
    int pos = 1;
    while (file >> value) {
        addDoubly(head, value, pos);
        pos++;
    }
    file.close();
}

int main() {
    setlocale(LC_ALL, "ru");
    system("chcp 1251");
    system("cls");
    DNode* doublyList = NULL;
    addDoubly(doublyList, 100, 1);
    addDoubly(doublyList, 200, 2);
    addDoubly(doublyList, 300, 3);
    printDoubly(doublyList);
    addDoubly(doublyList, 250, 3);
    printDoubly(doublyList);
    deleteFromEnd(doublyList, 2);
    printDoubly(doublyList);
    writeDoubly(doublyList, "doubly.txt");
    destroyDoubly(doublyList);
    printDoubly(doublyList);
    restoreDoubly(doublyList, "doubly.txt");
    printDoubly(doublyList);
    destroyDoubly(doublyList);
    return 0;
}
