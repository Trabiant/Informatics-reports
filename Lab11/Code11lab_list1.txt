#include <iostream>
#include <fstream>
#include <stdio.h>
using namespace std;

struct SNode {
    int data;
    SNode* next;
};

void addSingly(SNode*& head, int value) {
    SNode* newNode = new SNode;
    newNode->data = value;
    newNode->next = NULL;
    if (head == NULL) {
        head = newNode;
    }
    else {
        SNode* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }
}

void deleteSingly(SNode*& head, int value) {
    if (head == NULL)
        return;
    SNode* temp = head, * prev = NULL;
    while (temp != NULL && temp->data != value) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) {
        cout << "Элемент не найден" << endl;
        return;
    }
    if (prev == NULL)
        head = head->next;
    else
        prev->next = temp->next;
    delete temp;
}

void printSingly(SNode* head) {
    if (head == NULL) {
        cout << "Список пустой" << endl;
        return;
    }
    SNode* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

void writeSingly(SNode* head, const char* filename) {
    ofstream file(filename);
    if (!file) {
        cout << "Ошибка открытия файла для записи" << endl;
        return;
    }
    SNode* temp = head;
    while (temp != NULL) {
        file << temp->data << " ";
        temp = temp->next;
    }
    file.close();
}

void destroySingly(SNode*& head) {
    SNode* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        delete temp;
    }
}

void restoreSingly(SNode*& head, const char* filename) {
    ifstream file(filename);
    if (!file) {
        cout << "Ошибка открытия файла для чтения" << endl;
        return;
    }
    destroySingly(head);
    int value;
    while (file >> value)
        addSingly(head, value);
    file.close();
}

int main() {
    setlocale(LC_ALL, "ru");
    system("chcp 1251");
    system("cls");
    SNode* singlyList = NULL;
    addSingly(singlyList, 10);
    addSingly(singlyList, 20);
    addSingly(singlyList, 30);
    printSingly(singlyList);
    deleteSingly(singlyList, 20);
    printSingly(singlyList);
    writeSingly(singlyList, "singly.txt");
    destroySingly(singlyList);
    printSingly(singlyList);
    restoreSingly(singlyList, "singly.txt");
    printSingly(singlyList);
    destroySingly(singlyList);
    return 0;
}
